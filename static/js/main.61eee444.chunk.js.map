{"version":3,"sources":["components/Block.js","components/Trial.js","components/Introduction.js","components/EndScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Format","Object","freeze","TEXT","BUBBLE","Block","props","logOnClickResult","d","values","format","n","startTime","curentIteration","advanceIteration","experimentSeed","userID","addResults","diffInSeconds","Date","now","reactionTime","Math","round","Number","EPSILON","selectedAnswer","srcElement","__data__","correctAnswer","d3","maxVal","minVal","error","abs","results","Iteration","console","log","RenderBlock","remove","numCol","numRow","font_size","svg","blockRef","current","NB_VALUES","random","seedrandom","map","floor","_w","_h","scales","x","range","padding","align","y","paddingInner","maxCircleRadius","bandwidth","step","sign","selectAll","data","enter","append","attr","i","pad","on","style","circleRadiusScale","domain","sqrt","text","React","createRef","this","ref","height","width","Component","Trial","showInstruction","instructType","trialInstructionScreen","children","Introduction","type","placeholder","onKeyDown","onBeginExperiment","EndScreen","submitButton","onClick","onSubmit","className","showSubmitButton","submissionStatusObject","keys","key","headerIndex","item","index","val","innerIndex","DataSubmissionStatus","NOT_SUBMITTED","SUCCESFUL","FAILED","App","beginExperiment","event","keyCode","elem","target","groupCode","value","setState","showIntro","onSpacebarClicked","state","advanceTrial","currentTrial","newResult","submitHandler","e","preventDefault","axios","post","then","response","dataSubmitted","catch","whatToShow","trialParameters","length","iterationPerTrial","document","addEventListener","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.61eee444.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as seedrandom from 'seedrandom';\r\n\r\nexport const Format = Object.freeze({ TEXT: 'Text', BUBBLE: 'Bubble' });\r\n\r\nexport class Block extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.blockRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.RenderBlock();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.RenderBlock();\r\n    }\r\n\r\n    logOnClickResult = (d, values) => {\r\n        const {\r\n            format,\r\n            n,\r\n            startTime,\r\n            curentIteration,\r\n            advanceIteration,\r\n            experimentSeed,\r\n            userID,\r\n            addResults,\r\n        } = this.props;\r\n\r\n        const endTime = Date.now();\r\n        const diffInSeconds = (endTime - startTime) / 1000;\r\n        const reactionTime =\r\n            Math.round((diffInSeconds + Number.EPSILON) * 100) / 100;\r\n\r\n        const selectedAnswer = d.srcElement.__data__;\r\n        const correctAnswer = d3.max(values);\r\n\r\n        const maxVal = d3.max(values);\r\n        const minVal = d3.min(values);\r\n\r\n        const error = Math.abs(\r\n            (correctAnswer - selectedAnswer) / (maxVal - minVal)\r\n        );\r\n        const roundedError = Math.round((error + Number.EPSILON) * 1000) / 1000;\r\n\r\n        const results = {\r\n            'Group code': experimentSeed,\r\n            'User ID': userID,\r\n            Format: format,\r\n            'Number of values': n,\r\n            Iteration: curentIteration,\r\n            'Reaction time (seconds)': reactionTime,\r\n            'Error (0-1)': roundedError,\r\n        };\r\n\r\n        console.log(results);\r\n\r\n        addResults(results);\r\n        advanceIteration();\r\n    };\r\n\r\n    RenderBlock = () => {\r\n        // Get SVG and clear it before rendering\r\n        d3.selectAll('svg > *').remove();\r\n        const svg = d3.select(this.blockRef.current);\r\n\r\n        const { format, n, curentIteration, experimentSeed } = this.props;\r\n\r\n        // The canvas size\r\n        var width = 400;\r\n        var height = 400;\r\n\r\n        const NB_VALUES = n;\r\n\r\n        // Seeded randomizer\r\n        const random = seedrandom(\r\n            `${experimentSeed}${format}${n}${curentIteration}`\r\n        );\r\n\r\n        // the randomly generated set of values between 0 and 99\r\n        var values = d3.range(NB_VALUES).map((d) => Math.floor(random() * 100));\r\n\r\n        var pad = 5; //padding for grid layout (text and bubble)\r\n        var numCol, numRow; // number of columns, number of rows\r\n        var font_size;\r\n\r\n        if (NB_VALUES === 25) {\r\n            numCol = 5;\r\n            numRow = 5;\r\n            font_size = 48;\r\n        } else if (NB_VALUES === 3 || NB_VALUES === 5 || NB_VALUES === 9) {\r\n            numCol = 3;\r\n            numRow = 3;\r\n            font_size = 48;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n        const _w = width / numCol;\r\n        const _h = height / numRow;\r\n\r\n        const scales = {};\r\n        scales.x = d3.scalePoint().range([0, _w]).padding(0.5).align(1);\r\n        scales.y = d3.scaleBand().range([0, _h]).paddingInner(0.3);\r\n\r\n        const maxCircleRadius =\r\n            d3.min([scales.y.bandwidth(), scales.x.step()]) / 2;\r\n\r\n        var sign = svg\r\n            .selectAll('g')\r\n            .data(values)\r\n            .enter()\r\n            .append('g')\r\n            .attr('transform', function (d, i) {\r\n                return (\r\n                    'translate(' +\r\n                    ((i % numCol) * _w + (pad / 2) * -1) +\r\n                    ',' +\r\n                    (Math.floor(i / numRow) * _h + (pad / 2) * -1) +\r\n                    ')'\r\n                );\r\n            })\r\n            .on('click', (d) => this.logOnClickResult(d, values))\r\n            .style('cursor', 'pointer');\r\n\r\n        if (format === Format.BUBBLE) {\r\n            //that's to create a perceptual scaling by mapping square root of value to radius, but other scaling functions could be used\r\n            var circleRadiusScale = d3\r\n                .scaleLinear()\r\n                .domain([Math.sqrt(d3.min(values)), Math.sqrt(d3.max(values))])\r\n                .range([5, maxCircleRadius]);\r\n\r\n            //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\r\n            sign.append('circle')\r\n                .attr('cx', _w / 2)\r\n                .attr('cy', _w / 2)\r\n                .attr('r', maxCircleRadius / 2)\r\n                .style('fill', 'white');\r\n\r\n            // then, for each cell we appends a circle\r\n            sign.append('circle')\r\n                .attr('cx', _w / 2)\r\n                .attr('cy', _w / 2)\r\n                .attr('r', (d) => circleRadiusScale(Math.sqrt(d)))\r\n                .style('fill', 'black');\r\n        } else if (format === Format.TEXT) {\r\n            //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\r\n            sign.append('circle')\r\n                .attr('cx', _w / 2)\r\n                .attr('cy', _w / 2)\r\n                .attr('r', maxCircleRadius / 2)\r\n                .style('fill', 'white');\r\n\r\n            sign.append('text')\r\n                .attr('x', _w / 2)\r\n                .attr('y', _w / 2)\r\n                .attr('text-anchor', 'middle')\r\n                .attr('font-size', font_size + 'px')\r\n                .text((d) => d);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <svg ref={this.blockRef} style={{ height: 400, width: 400 }}></svg>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Trial extends React.Component {\r\n    render() {\r\n        const {\r\n            format,\r\n            n,\r\n            showInstruction,\r\n            instructType,\r\n            curentIteration,\r\n        } = this.props;\r\n\r\n        const trialInstructionScreen = (\r\n            <div>\r\n                <h1>{`${format} phase`}</h1>\r\n                <p>\r\n                    {instructType === 1\r\n                        ? `Perform the required task for a group of ${n} numbers`\r\n                        : `Now do the same for a group of ${n} numbers`}\r\n                </p>\r\n                <p>{'Press Space to Continue'}</p>\r\n            </div>\r\n        );\r\n\r\n        if (showInstruction) {\r\n            return trialInstructionScreen;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h1>{`Iteration ${curentIteration}`}</h1>\r\n                    {this.props.children}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Introduction extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to our visualization experiment</h1>\r\n                <p>\r\n                    For this experiment, you will be shown a series of numbers\r\n                    represented as either text or circles of corresponding\r\n                    sizes.\r\n                </p>\r\n                <p>\r\n                    Your required task is to click the biggest number/circle as\r\n                    fast as you can\r\n                </p>\r\n                <p>\r\n                    To begin, please enter a group code, if you were given one.\r\n                </p>\r\n                <p>\r\n                    This is to ensure everyone in your group, who performs the\r\n                    experiment, receives the same trials.\r\n                </p>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Please enter group code\"\r\n                    onKeyDown={this.props.onBeginExperiment}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class EndScreen extends React.Component {\r\n    render() {\r\n        const submitButton = (\r\n            <div>\r\n                <p>\r\n                    Click the button below to submit your results for analysis\r\n                </p>\r\n                <button type={'submit'} onClick={this.props.onSubmit}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h2>Thank you for participating</h2>\r\n                <p>Your results are below</p>\r\n                {this.props.showSubmitButton\r\n                    ? submitButton\r\n                    : this.props.submissionStatusObject}\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr key={'header'}>\r\n                            {Object.keys(this.props.results[0]).map(\r\n                                (key, headerIndex) => (\r\n                                    <th key={headerIndex}>{key}</th>\r\n                                )\r\n                            )}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.results.map((item, index) => (\r\n                            <tr key={index}>\r\n                                {Object.values(item).map((val, innerIndex) => (\r\n                                    <td key={innerIndex}>{val}</td>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport { Block, Format } from './components/Block';\nimport Trial from './components/Trial';\nimport Introduction from './components/Introduction';\nimport EndScreen from './components/EndScreen';\nimport './App.css';\nimport axios from 'axios';\n\nexport const DataSubmissionStatus = Object.freeze({\n    NOT_SUBMITTED: 1,\n    SUCCESFUL: 2,\n    FAILED: 3,\n});\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentTrial: 0,\n            showInstruction: true,\n            curentIteration: 1,\n            results: [],\n            showIntro: true,\n            dataSubmitted: DataSubmissionStatus.NOT_SUBMITTED,\n        };\n\n        this.userID = Math.floor(Math.random() * 90000) + 10000;\n        this.groupCode = 0;\n\n        this.iterationPerTrial = 3;\n        this.trialParameters = [\n            { format: Format.TEXT, n: 3, instructType: 1 },\n            { format: Format.TEXT, n: 5, instructType: 2 },\n            { format: Format.TEXT, n: 9, instructType: 2 },\n            { format: Format.TEXT, n: 25, instructType: 2 },\n            { format: Format.BUBBLE, n: 3, instructType: 1 },\n            { format: Format.BUBBLE, n: 5, instructType: 2 },\n            { format: Format.BUBBLE, n: 9, instructType: 2 },\n            { format: Format.BUBBLE, n: 25, instructType: 2 },\n        ];\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.onSpacebarClicked);\n    }\n\n    componentDidUpdate() {\n        if (this.state.curentIteration > this.iterationPerTrial) {\n            this.advanceTrial();\n        }\n    }\n\n    beginExperiment = (event) => {\n        if (event.keyCode === 13) {\n            var elem = event.srcElement || event.target;\n            this.groupCode = elem.value;\n            this.setState({\n                showIntro: false,\n            });\n        }\n    };\n\n    onSpacebarClicked = (event) => {\n        if (\n            this.state.showInstruction &&\n            (event.key === 'Spacebar' ||\n                event.key === ' ' ||\n                event.keyCode === 32)\n        ) {\n            this.setState({\n                showInstruction: false,\n            });\n        }\n    };\n\n    advanceIteration = () => {\n        this.setState({\n            curentIteration: this.state.curentIteration + 1,\n        });\n    };\n\n    advanceTrial = () => {\n        this.setState({\n            currentTrial: this.state.currentTrial + 1,\n            curentIteration: 1,\n            showInstruction: true,\n        });\n    };\n\n    addResults = (newResult) => {\n        this.setState({\n            results: [...this.state.results, newResult],\n        });\n    };\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        console.log(this.state.results);\n\n        axios\n            .post(\n                'https://sheet.best/api/sheets/34aac690-2c0c-4062-8da7-5ca1898ca293',\n                this.state.results\n            )\n            .then((response) => {\n                console.log(response);\n                this.setState({\n                    dataSubmitted: DataSubmissionStatus.SUCCESFUL,\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                this.setState({\n                    dataSubmitted: DataSubmissionStatus.FAILED,\n                });\n            });\n    };\n\n    whatToShow = () => {\n        if (this.state.showIntro) {\n            return <Introduction onBeginExperiment={this.beginExperiment} />;\n        } else if (this.state.currentTrial === this.trialParameters.length) {\n            var submissionStatusObject = null;\n\n            if (this.state.dataSubmitted === DataSubmissionStatus.SUCCESFUL) {\n                submissionStatusObject = (\n                    <div className={'submittedSuccessfully'}>\n                        Data submission complete\n                    </div>\n                );\n            } else if (\n                this.state.dataSubmitted === DataSubmissionStatus.FAILED\n            ) {\n                submissionStatusObject = (\n                    <div className={'submittedFailed'}>\n                        Data submission failed\n                    </div>\n                );\n            }\n\n            return (\n                <EndScreen\n                    results={this.state.results}\n                    showSubmitButton={\n                        this.state.dataSubmitted ===\n                        DataSubmissionStatus.NOT_SUBMITTED\n                    }\n                    submissionStatusObject={submissionStatusObject}\n                    onSubmit={this.submitHandler}\n                />\n            );\n        } else {\n            return (\n                <Trial\n                    format={\n                        this.trialParameters[this.state.currentTrial].format\n                    }\n                    n={this.trialParameters[this.state.currentTrial].n}\n                    showInstruction={this.state.showInstruction}\n                    instructType={\n                        this.trialParameters[this.state.currentTrial]\n                            .instructType\n                    }\n                    curentIteration={this.state.curentIteration}\n                >\n                    <Block\n                        format={\n                            this.trialParameters[this.state.currentTrial].format\n                        }\n                        n={this.trialParameters[this.state.currentTrial].n}\n                        startTime={Date.now()}\n                        curentIteration={this.state.curentIteration}\n                        advanceIteration={this.advanceIteration}\n                        experimentSeed={this.groupCode}\n                        userID={this.userID}\n                        addResults={this.addResults}\n                    />\n                </Trial>\n            );\n        }\n    };\n\n    render() {\n        return <div className=\"App\">{this.whatToShow()}</div>;\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}